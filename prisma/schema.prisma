// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 계정 테이블
model Account {
  accountId   Int       @id @default(autoincrement()) @map("accountId")
  email       String    @unique @map("email")
  password    String    @db.VarChar(7) @map("password")   // 길이 7자 제한
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  user User?
  teamPlayer TeamPlayer[]

  @@map("Account")

}

// 사용자 테이블
model User {
  userId      Int       @id @default(autoincrement()) @map("userId")
  accountId   Int       @unique @map("accountId")
  name        String    @map("name")
  cash        Int       @map("cash")
  guarantee   Int       @default(0) @map("guarantee")
  userScore   Int       @default(0) @map("userScore")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  score Score[]

  @@map("User")

}

// 점수 테이블
model Score {
  scoreId     Int       @id @default(autoincrement()) @map("scoreId")
  userId      Int       @map("userId")
  win         Int       @default(0) @map("win")
  lose        Int       @default(0) @map("lose")
  draw        Int       @default(0) @map("draw")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@map("Score")

}

// 팀 테이블
model TeamPlayer {
  teamId      Int       @id @default(autoincrement()) @map("teamId")
  accountId   Int       @map("accountId")
  playerId    Int       @map("playerId")
  upgrade     Int       @default(0) @map("upgrade")
  isTeam      Boolean   @default(false) @map("isTeam")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("TeamPlayer")

}

// 카드 테이블
model Player {
  playerId    Int       @id @default(autoincrement()) @map("playerId")
  playerName  String    @map("playerName")
  rare        Int       @map("rare")
  speed       Int       @map("speed")
  finishing   Int       @map("finishing")
  pass        Int       @map("pass")
  defense     Int       @map("defense")
  stamina     Int       @map("stamina")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  
  teamPlayer TeamPlayer[]

  @@map("Player")

}