generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 계정 테이블
model Account {
  accountId   Int       @id @default(autoincrement()) @map("accountId")
  email       String    @unique @map("email")
  password    String    @map("password")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  user User?

  @@map("Account")

}

// 사용자 테이블
model User {
  userId      Int       @id @default(autoincrement()) @map("userId")
  accountId   Int       @unique @map("accountId")
  name        String    @unique @map("name")
  cash        Int       @map("cash")
  guarantee   Int       @default(0) @map("guarantee")
  userScore   Int       @default(0) @map("userScore")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  userPlayer UserPlayer[]
  score Score?
  transfer TransferMarket[] @relation("UserTransferMarket")

  @@map("User")

}

// 점수 테이블
model Score {
  scoreId     Int       @id @default(autoincrement()) @map("scoreId")
  userId      Int       @unique @map("userId")
  win         Int       @default(0) @map("win")
  lose        Int       @default(0) @map("lose")
  draw        Int       @default(0) @map("draw")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@map("Score")

}

// 팀 테이블
model UserPlayer {
  Id          Int       @id @default(autoincrement()) @map("Id")
  userId      Int       @map("userId")
  playerId    Int       @map("playerId")
  upgrade     Int       @default(0) @map("upgrade")
  teamId      Int?      @map("teamId")
  count       Int       @default(0) @map("count")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  
  @@map("UserPlayer")
}

// 카드 테이블
model Player {
  playerId    Int       @id @default(autoincrement()) @map("playerId")
  playerName  String    @map("playerName")
  rare        Int       @map("rare")
  speed       Int       @map("speed")
  finishing   Int       @map("finishing")
  pass        Int       @map("pass")
  defense     Int       @map("defense")
  stamina     Int       @map("stamina")
  createdAt   DateTime  @default(now()) @map("createdAt")
  updatedAt   DateTime  @updatedAt @map("updatedAt")
  
  userPlayer UserPlayer[]
  transfer TransferMarket[] @relation("PlayerTransferMarket")

  @@map("Player")

}

// 이적시장 테이블
model TransferMarket {
  marketId     Int       @id @default(autoincrement()) @map("marketId")
  sellerId     Int       @map("sellerId")
  playerId     Int       @map("playerId")  // 판매되는 선수 (Player)
  price        Int       @map("price")     // 선수의 판매 가격
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @updatedAt @map("updatedAt")

  seller User @relation("UserTransferMarket",fields: [sellerId], references: [userId], onDelete: Cascade)
  player Player @relation("PlayerTransferMarket",fields: [playerId], references: [playerId], onDelete: Cascade)
  @@map("TransferMarket")
}