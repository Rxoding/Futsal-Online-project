// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 계정 테이블
model Account {
  accountId   Int       @id @default(autoincrement()) @map("accountId)
  email       String    @unique @map("email")
  password    String    @map("password")
  name        String    @map("name")
  createdAt   DataTime  @default(now()) @map("createdAt")
  updatedAt   DataTime  @updatedAt @map("updatedAt")

  user User?
  team Team[]

  @@map("Account")

}

// 사용자 테이블
model User {
  userId      Int       @id @default(autoincrement()) @map("userId")
  accountId   Int       @unique @map("accountId")
  userName    String    @map("userName")
  cash        Int       @map("cash")
  guarantee   Int       @map("guarantee")
  userScore   Int       @map("userScore")
  createdAt   DataTime  @default(now()) @map("createdAt")
  updatedAt   DataTime  @updatedAt @map("updatedAt")

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  score Score[]

  @@map("User")

}

// 점수 테이블
model Score {
  scoreId     Int       @id @default(autoincrement()) @map("scoreId")
  userId      Int       @unique @map("userId")
  win         Int       @map("win")
  lose        Int       @map("lose")
  draw        Int       @map("draw")
  createdAt   DataTime  @default(now()) @map("createdAt")
  updatedAt   DataTime  @updatedAt @map("updatedAt")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@map("Score")

}

// 팀 테이블
model Team {
  teamId      Int @id @default(autoincrement()) @map("teamId")
  accountId   Int @unique @map("accountId")
  playerId    Int @map("playerId")
  upgrade     Int @map("upgrade")
  isTeam      Boolean @map("isTeam")
  createdAt   DataTime @default(now()) @map("createdAt")
  updatedAt   DataTime @updatedAt @map("updatedAt")

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  player Player[]

  @@map("Team")

}

// 카드 테이블
model Player {
  playerId Int @id @default(autoincrement()) @map("playerId")
  playerName String @map("playerName")
  rare Int @map("rare")
  speed Int @map("speed")
  finishing Int @map("finishing")
  pass Int @map("pass")
  defense Int @map("defense")
  stamina Int @map("stamina")
  createdAt DataTime @default(now()) @map("createdAt")
  updatedAt DataTime @updatedAt @map("updatedAt")
  
  team Team[]

  @@map("Player")
}